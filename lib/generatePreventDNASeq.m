function [prevent_string,prevent_array] = generatePreventDNASeq(base_prevented,target_seq)
% function [prevent_string,prevent_array] = generatePreventDNASeq(base_prevented,target_seq)

conv_table = {...
    'A',{'A'};...
    'C',{'C'};...
    'G',{'G'};...
    'T',{'T'};...
    'A',{'A'};...
    'K',{'G','T'};...
    'M',{'A','C'};...
    'R',{'A','G'};...
    'S',{'C','G'};...
    'W',{'A','T'};...
    'Y',{'C','T'};...
    'V',{'A','C','G'};...
    'H',{'A','C','T'};...
    'B',{'C','G','T'};...
    'D',{'A','G','T'};...
    'N',{'A','C','G','T'};...
    };
conv_bases = 'ACGTAKMRSWYVHBDN';
target_seq = rna2dna2(target_seq);
target_seq0 = target_seq;
prevent_array = {};
for c1 = 1:size(base_prevented,1)
    repeat_num = str2num(base_prevented(c1,2:end));
    base_char = base_prevented(c1,1);
    target_seq = target_seq0;
    flag = 0;
    conv_index = find(conv_bases == base_char);
    conv_vals = conv_table{conv_index,2};
    for c2 = 1:length(conv_vals)
        rep_pos = strfind(target_seq0,conv_vals{c2});
        target_seq(rep_pos) = base_char;
    end
    while repeat_num < 100
        p_string = char(zeros(1,repeat_num)+base_char);
        search_result = strfind(target_seq,p_string);
        if isempty(search_result)
            break;
        else
            repeat_num = repeat_num + 1;
        end        
    end
    prevent_array{end+1,1} = p_string;
end
prevent_string = 'prevent = ';
for c1 = 1:size(prevent_array,1)
    prevent_string = sprintf('%s%s, ',prevent_string,prevent_array{c1});
end
prevent_string(end-1:end) = [];

